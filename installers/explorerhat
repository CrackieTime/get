#!/bin/bash

: <<'DISCLAIMER'

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

This script is licensed under the terms of the MIT license.
Unless otherwise noted, code reproduced herein
was written for this script.

- The Pimoroni Crew -

DISCLAIMER

productname="Explorer HAT/pHAT" # the name of the product to install
scriptname="explorerhat" # the name of this script
debugmode="no" # whether the script outputs debug level messages
forcesudo="no" # whether the script requires to be ran with root privileges
promptreboot="no" # whether the script should always prompt user to reboot
customcmd="no" # whether to execute commands specified before exit
raspbianonly="yes" # whether the script is allowed to run on other OSes
squeezysupport="no" # whether Squeezy is supported or not
wheezysupport="yes" # whether Wheezy is supported or not
jessiesupport="yes" # whether Jessie is supported or not
piplibname="explorerhat" # the name of the lib in pip repo
pip2support="yes" # whether python2 is supported or not
pip3support="yes" # whether python3 is supported or not
localdir="explorerhat" # the name of the dir for copy of examples
gitreponame="explorer-hat" # the name of the git project repo
gitrepoclone="no" # whether the git repo is to be cloned locally
docdir="$gitreponame/documentation" # subdirectory of examples in repo 
examplesdir="$gitreponame/examples" # subdirectory of examples in repo 
i2creq="yes" # whether i2c is required or not
spireq="no" # whether spi is required or not
uartreq="no" # whether uart communication is required or not
pkgaptremove=() # list of conflicting apt packages to remove
pkgdeplist7=( "git" "python-pip" "python-rpi.gpio" "python-smbus" "python-dev" "python3-pip" "python3-rpi.gpio" "python3-smbus" "python3-dev" ) # list core dependencies assuming Wheezy
pkgdeplist8=( "python-gpiozero" "python3-gpiozero" ) # list extra dependencies assuming Jessie
moreaptdep=( "python-pygame" "python3-pygame" ) # list of all the additional apt dependencies
morepipdep=() # list of all the additional pip dependencies

FORCE=$1
INTERACTIVE=false
ASK_TO_REBOOT=false
CONFIG=/boot/config.txt
BOOTCMD=/boot/cmdline.txt
BLACKLIST=/etc/modprobe.d/raspi-blacklist.conf
INITABCONF=/etc/inittab
LOADMOD=/etc/modules
DEVICE_TREE=true
UPDATE_DB=false

confirm() {
    if [ "$FORCE" == '-y' ]; then
        true
    else
        read -r -p "$1 [y/N] " response < /dev/tty
        if [[ $response =~ ^(yes|y)$ ]]; then
            true
        else
            false
        fi
    fi
}

success() {
    echo "$(tput setaf 2)$1$(tput sgr0)"
}

warning() {
    echo "$(tput setaf 1)$1$(tput sgr0)"
}

newline() {
    echo ""
}

sudocheck() {
    if [ $(id -u) -ne 0 ]; then
        echo -e "Install must be run as root. Try 'sudo ./$scriptname'\n"
        exit
    fi
}

sysclean() {
    sudo apt-get clean
}

sysupdate() {
    sudo apt-get update
}

sysupdgrade() {
    sudo apt-get update && sudo apt-get upgrade
    sudo apt-get clean && sudo apt-get autoclean
}

sysreboot() {
    warning "Some changes made to your system require"
    warning "your computer to reboot to take effect."
    newline
    if confirm "Would you like to reboot now?"; then
        sync
        sudo reboot
    fi
}

os_check() {
    IS_RASPBIAN=false
    IS_MACOSX=false
    IS_X86_64=false
    IS_X86_32=false

    if [ -f /etc/os-release ] && cat /etc/os-release | grep "Raspbian" > /dev/null; then
        IS_RASPBIAN=true
    elif uname -s | grep "Darwin" > /dev/null; then
        IS_MACOSX=true
    elif uname -m | grep "x86_64" > /dev/null; then
        IS_X86_64=true
    else
        IS_X86_32=true
    fi
}

raspbian_check() {
    IS_SQUEEZY=false
    IS_WHEEZY=false
    IS_JESSIE=false

    if [ -f /etc/os-release ]; then
        if cat /etc/os-release | grep "jessie" > /dev/null; then
            IS_JESSIE=true
        elif cat /etc/os-release | grep "wheezy" > /dev/null; then
            IS_WHEEZY=true
        elif cat /etc/os-release | grep "squeezy" > /dev/null; then
            IS_SQUEEZY=true
        else
            echo "Unsupported distribution"
            exit
        fi
    fi
}

raspbian_old() {
    if $IS_JESSIE;then
        false
    else
        true
    fi
}

get_init_sys() {
    if command -v systemctl > /dev/null && systemctl | grep -q '\-\.mount'; then
        SYSTEMD=1
    elif [ -f /etc/init.d/cron ] && [ ! -h /etc/init.d/cron ]; then
        SYSTEMD=0
    else
        echo "Unrecognised init system" && exit
    fi
}

usb_max_power() {
    if $IS_RASPBIAN; then
        if [ -e $CONFIG ] && grep -q "^max_usb_current=1$" $CONFIG; then
            newline
            echo "Max USB current setting already active"
        else
            newline
            echo "Adjusting USB current setting in $CONFIG"
            echo "max_usb_current=1" | sudo tee -a $CONFIG
            newline
            ASK_TO_REBOOT=true
        fi
    fi
}

apt_pkg_req() {
    APT_CHK=$(dpkg-query -W -f='${Status}\n' $1 2> /dev/null | grep "install ok installed")

    if [ "" == "$APT_CHK" ]; then
        true
    else
        false
    fi
}

apt_pkg_install() {
    \curl -sS get.pimoroni.com/package | bash -s - $1 || { warning "Sorry, Apt failed to install $1, I can't continue!" && exit; }
}

pip_pkg_req() {
    PIP_CHK=$(pip search $1 | grep INSTALLED)

    if [ "" == "$PIP_CHK" ]; then
        true
    else
        false
    fi
}

pip_chk_pip3() {
    if command -v pip3 > /dev/null; then
        PIP3_BIN="pip3"
    elif command -v pip-3.2 > /dev/null; then
        PIP3_BIN="pip-3.2"
    else
        PIP3_BIN=""
    fi
}

pip_pkg_req3() {
    PIP_CHK=$($PIP3_BIN search $1 | grep INSTALLED)

    if [ "" == "$PIP_CHK" ]; then
        true
    else
        false
    fi
}

: <<'MAINSTART'

Perform all global variables declarations as well as function definition
above this section for clarity, thanks!

MAINSTART

os_check

if $IS_RASPBIAN; then
    raspbian_check
    if [ $squeezysupport == "no" ] && $IS_SQUEEZY; then
        newline
        warning "--- Warning ---"
        newline
        echo "The $productname installer"
        echo "does not work on this version of Raspbian."
        echo "Check https://github.com/pimoroni/$gitreponame"
        echo "for additional information and support"
        newline
        exit
    fi
    if [ $wheezysupport == "no" ] && $IS_WHEEZY; then
        newline
        warning "--- Warning ---"
        newline
        echo "The $productname installer"
        echo "does not work on this version of Raspbian."
        echo "Check https://github.com/pimoroni/$gitreponame"
        echo "for additional information and support"
        newline
        exit
    fi
elif ! $IS_RASPBIAN && [ $raspbianonly == "yes" ]; then
    warning "Warning!"
    echo "Please only run this script on Raspbian on your Raspberry Pi"
    exit
else
    if [ $debugmode == "yes" ]; then
        newline
        echo "IS_RASPBIAN is $IS_RASPBIAN"
        echo "IS_MACOSX is $IS_MACOSX"
        echo "IS_X86_64 is $IS_X86_64"
        echo "IS_X86_32 is $IS_X86_32"
    fi
fi

if [ $forcesudo == "yes" ]; then
    sudocheck
fi

newline
echo "This script will install everything needed to use"
echo "$productname"
newline
warning "--- Warning ---"
newline
echo "Always be careful when running scripts and commands"
echo "copied from the internet. Ensure they are from a"
echo "trusted source."
newline
echo "If you want to see what this script does before"
echo "running it, you should run:"
echo "    \curl -sS get.pimoroni.com/$scriptname"
newline

if confirm "Do you wish to continue?"; then

    newline
    echo "Checking hardware requirements..."

    if [ $uartreq == "yes" ]; then
        newline
        echo "The $productname requires UART communication."
        echo "The serial console needs to be disabled."
        if confirm "Do you wish to continue?"; then
            \curl -sS get.pimoroni.com/uartoff | sudo bash -s - "-y"
        else
            newline
            echo "Aborting..."
            newline
            exit
        fi
    fi

    if [ $spireq == "yes" ]; then
        newline
        if confirm "The $productname requires SPI, enable now?"; then
            \curl -sS get.pimoroni.com/spi | sudo bash -s - "-y"
        fi
    fi

    if [ $i2creq == "yes" ]; then
        newline
        if confirm "The $productname requires I2C, enable now?"; then
            \curl -sS get.pimoroni.com/i2c | sudo bash -s - "-y"
        fi
    fi

    newline
    echo "Checking install requirements..."

    if command -v apt-get > /dev/null; then

        for pkgrm in ${pkgaptremove[@]}; do
            sudo apt-get remove "$pkgrm"
        done

        for pkgdep in ${pkgdeplist7[@]}; do
            if apt_pkg_req "$pkgdep"; then
                UPDATE_DB=true
            fi
        done
        for pkgdep in ${pkgdeplist8[@]}; do
            if apt_pkg_req "$pkgdep"; then
                UPDATE_DB=true
            fi
        done
        for morepkgdep in ${moreaptdep[@]}; do
            if apt_pkg_req "$morepkgdep"; then
                UPDATE_DB=true
            fi
        done

        if $UPDATE_DB; then
            newline
            echo "Updating package indexes..."
            sysupdate

            newline
            echo "Checking for dependencies..."

            for pkgdep in ${pkgdeplist7[@]}; do
                if apt_pkg_req "$pkgdep"; then
                    apt_pkg_install "$pkgdep"
                fi
            done

            if ! raspbian_old; then
                for pkgdep in ${pkgdeplist8[@]}; do
                    if apt_pkg_req "$pkgdep"; then
                        apt_pkg_install "$pkgdep"
                    fi
                done
            fi
        else
            success "Found!"
        fi
    fi

    pip_chk_pip3

    if [ $piplibname != "na" ]; then
        if [ $pip2support == "yes" ] && [ -n $(which python2) ]; then
            if command -v pip > /dev/null; then
                newline
                echo "Checking for Python 2 library..."

                if pip_pkg_req "$piplibname"; then
                    echo "Installing $productname library for Python 2..."
                    newline
                    if ! sudo pip install $piplibname; then
                        warning "Python 2 library install failed!"
                        echo "If problems persist, visit forums.pimoroni.com for support"
                        exit
                    fi
                    success "Done!"
                else
                    success "Found!"
                    newline
                    if confirm "Python 2 module found. Reinstall/Update?"; then
                        if ! sudo pip install $piplibname -I; then
                            warning "Python 2 library install failed!"
                            echo "If problems persist, visit forums.pimoroni.com for support"
                        exit
                        fi
                        success "Done!"
                    fi
                fi
            fi
        else
            echo "Note: $productname currently supports Python 3 only."
        fi

        if [ $pip3support == "yes" ] && [ -n $(which python3) ]; then
            if [ -n "$PIP3_BIN" ]; then
                newline
                echo "Checking for Python 3 library..."
                if pip_pkg_req3 "$piplibname"; then
                    echo "Installing $productname library for Python 3..."
                    newline
                    if ! sudo $PIP3_BIN install $piplibname; then
                        warning "Python 3 library install failed!"
                        echo "If problems persist, visit forums.pimoroni.com for support"
                        exit
                    fi
                else
                    success "Found!"
                    newline
                    if confirm "Python 3 module found. Reinstall/Update?"; then
                        if ! sudo $PIP3_BIN install $piplibname -I; then
                            warning "Python 3 library install failed!"
                            exit
                        fi
                    fi
                fi
            fi
        else
            if [ $pip3support == "no" ]; then
                echo "Note: $productname currently supports Python 2 only."
            else
                echo "Python3-pip does not seem to be installed"
            fi
        fi
    fi

    if ! $IS_MACOSX; then
        if [ $EUID -ne 0 ]; then
            USER_HOME=$(getent passwd $USER | cut -d: -f6)
        else
            USER_HOME=$(getent passwd $SUDO_USER | cut -d: -f6)
        fi
    else
        if [ $EUID -ne 0 ]; then
            USER_HOME=$(dscl . -read /Users/$USER NFSHomeDirectory | cut -d: -f2)
        else
            USER_HOME=$(dscl . -read /Users/$SUDO_USER NFSHomeDirectory | cut -d: -f2)
        fi
    fi

    WORKING_DIR="$USER_HOME/Pimoroni"

    if ! [ -d $WORKING_DIR ]; then
            mkdir $WORKING_DIR
    fi

    if [ $examplesdir != "na" ]; then

        if ! [ -d $WORKING_DIR/$localdir ]; then
            newline
            echo "Downloading $productname examples..."
            export TMPDIR=`mktemp -d /tmp/pimoroni.XXXXXX`
            cd $TMPDIR
            git clone --depth=1 https://github.com/pimoroni/$gitreponame
            cd $WORKING_DIR
            mkdir $localdir
            cp -R $TMPDIR/$examplesdir/* $WORKING_DIR/$localdir/
            rm -rf $TMPDIR
            success "Examples copied to $WORKING_DIR/$localdir/"
        else
            newline
            if confirm "Examples already exist, shall I replace them?"; then
                mv $WORKING_DIR/$localdir $WORKING_DIR/$localdir-backup
                echo "Updating $productname examples..."
                export TMPDIR=`mktemp -d /tmp/pimoroni.XXXXXX`
                cd $TMPDIR
                git clone https://github.com/pimoroni/$gitreponame
                cd $WORKING_DIR
                mkdir $localdir
                cp -R $TMPDIR/$examplesdir/* $WORKING_DIR/$localdir/
                rm -rf $TMPDIR
                warning "I backed up the examples to $localdir-backup, just in case you've changed anything!"
                success "Examples copied to $WORKING_DIR/$localdir/"
            fi
        fi
    fi

    newline
    echo "Checking additional software requirements..."

    moredepreq=false

    for moredep in ${moreaptdep[@]}
        do if apt_pkg_req "$moredep"; then
            moredepreq=true
        fi
        done
    for moredep in ${morepipdep[@]}
        do if pip_pkg_req "$moredep"; then
            moredepreq=true
        fi
        done

    if $moredepreq; then
        newline
        echo "Some $productname examples/plugins"
        echo "require additional software and/or modules"
        if confirm "Would you like to install them now?"; then
            for moredep in ${moreaptdep[@]}
                do if apt_pkg_req "$moredep"; then
                    apt_pkg_install "$moredep"
                fi
                done
            for moredep in ${morepipdep[@]}
                do if pip_pkg_req "$moredep"; then
                    sudo pip install "$moredep"
                    sudo $PIP3_BIN install "$moredep"
                fi
                done
        fi
    else
        success "Found!"
    fi

    if [ $gitrepoclone == "yes" ]; then
        if ! [ -d $WORKING_DIR/$localdir ]; then
            mkdir $WORKING_DIR/$localdir
        fi
        cd $WORKING_DIR/$localdir
        if ! [ -d $WORKING_DIR/$localdir/$gitreponame ]; then
            newline
            echo "Cloning Github repo locally..."
            git clone https://github.com/pimoroni/$gitreponame
        else
            cd $WORKING_DIR/$localdir/$gitreponame
            newline
            echo "Github repo already present. Updating..."
            git pull
        fi
    fi

    if [ $customcmd == "no" ]; then
        sysclean
        newline
        success "All done!"
        newline
        echo "Enjoy your new $productname!"
        if [ $pip3support == "no" ]; then
            echo "Note: $productname currently supports Python 2 only."
        fi
        if [ $pip2support == "no" ]; then
            echo "Note: $productname currently supports Python 3 only."
        fi
        newline
    else
        newline
        echo "Finalising Install..."
        # place all custom commands in this scope
        newline
    fi

    if [ $promptreboot == "yes" ] || $ASK_TO_REBOOT; then
        sysreboot
    fi
else
    newline
    echo "Aborting..."
    newline
fi

#based on template 1602252215
