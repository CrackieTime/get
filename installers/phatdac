#!/bin/bash

: <<'DISCLAIMER'

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

This script is licensed under the terms of the MIT license.
Unless otherwise noted, code reproduced herein
was written for this script.

- The Pimoroni Crew -

DISCLAIMER

: <<'ACKNOWLEDGEMENT'

The code for the kernelatleast reproduced herein is lifted from:
http://linux-tipps.blogspot.co.uk/2011/05/checking-if-at-least-kernel-version-is.html

ACKNOWLEDGEMENT

productname="pHAT DAC" # the name of the product to install
scriptname="phatdac" # the name of this script
forcesudo="no" # whether the script requires to be ran with root privileges
promptreboot="no" # whether the script should always prompt user to reboot
spireq="no" # whether spi is required or not
i2creq="no" # whether i2c is required or not
i2sreq="yes" # whether i2s is required or not

FORCE=$1
INTERACTIVE=false
ASK_TO_REBOOT=false
CONFIG=/boot/config.txt
BOOTCMD=/boot/cmdline.txt
BLACKLIST=/etc/modprobe.d/raspi-blacklist.conf
INITABCONF=/etc/inittab
LOADMOD=/etc/modules
DEVICE_TREE=true
UPDATE_DB=false

confirm() {
    if [ "$FORCE" == '-y' ]; then
        true
    else
        read -r -p "$1 [y/N] " response < /dev/tty
        response=${response,,}
        if [[ $response =~ ^(yes|y)$ ]]; then
            true
        else
            false
        fi
    fi
}

success() {
    echo "$(tput setaf 2)$1$(tput sgr0)"
}

warning() {
    echo "$(tput setaf 1)$1$(tput sgr0)"
}

sudocheck() {
    if [ $(id -u) -ne 0 ]; then
        printf "Install must be run as root. Try 'sudo ./$scriptname'\n"
        exit 1
    fi
}

sysclean() {
    sudo apt-get clean
}

sysupdate() {
    sudo apt-get update
}

sysupdgrade() {
    sudo apt-get update && sudo apt-get upgrade
    sudo apt-get clean && sudo apt-get autoclean
}

sysreboot() {
    warning "Some changes made to your system require"
    warning "your computer to reboot to take effect."
    echo ""
    if confirm "Would you like to reboot now?"; then
        sync
        sudo reboot
    fi
}

raspbian_check() {
    IS_RASPBIAN=$(cat /etc/*-release | grep "Raspbian")

    if [[ "" == $IS_RASPBIAN ]]; then
        false
    else
        true
    fi
}

raspbian_old() {
    DIST_CHK=$(cat /etc/os-release | grep "wheezy")

    if [ "" == "$DIST_CHK" ];then
        false
    else
        true
    fi
}

get_init_sys() {
    if command -v systemctl > /dev/null && systemctl | grep -q '\-\.mount'; then
        SYSTEMD=1
    elif [ -f /etc/init.d/cron ] && [ ! -h /etc/init.d/cron ]; then
        SYSTEMD=0
    else
        echo "Unrecognised init system" && exit
    fi
}

if ! raspbian_check; then
    warning "Warning!"
    echo "Please only run this script on Raspbian on your Raspberry Pi"
    exit 1
fi

if [ $forcesudo == "yes" ]; then
    sudocheck
fi

echo ""
echo "This script will install everything needed to use"
echo "$productname"
echo ""
warning "--- Warning ---"
echo ""
echo "Always be careful when running scripts and commands"
echo "copied from the internet. Ensure they are from a"
echo "trusted source."
echo ""
echo "If you want to see what this script does before"
echo "running it, you should run:"
echo "    \curl -sS get.pimoroni.com/$scriptname"
echo ""

if confirm "Do you wish to continue?"; then

    echo ""
    echo "Checking hardware requirements..."

    if [ $spireq == "yes" ]; then
        echo ""
        if confirm "Hardware requires SPI, enable now?"; then
            \curl -sS get.pimoroni.com/spi | bash -s - "-y"
        fi
    fi

    if [ $i2creq == "yes" ]; then
        echo ""
        if confirm "Hardware requires I2C, enable now?"; then
            \curl -sS get.pimoroni.com/i2c | bash -s - "-y"
        fi
    fi

    if [ $i2sreq == "yes" ]; then
        if [ -e $CONFIG ] && grep -q "^device_tree=$" $CONFIG; then
            DEVICE_TREE=false
        fi

        if $DEVICE_TREE; then

            echo ""
            echo "Adding Device Tree Entry to $CONFIG"

            if [ -e $CONFIG ] && grep -q "^dtoverlay=hifiberry-dac$" $CONFIG; then
                echo "dtoverlay already active"
            else
                echo "dtoverlay=hifiberry-dac" | sudo tee -a $CONFIG
                ASK_TO_REBOOT=true
            fi

            if [ -e $BLACKLIST ]; then
                echo ""
                echo "Commenting out Blacklist entry in "
                echo "$BLACKLIST"
                sudo sed -i $BLACKLIST -e "s/^blacklist[[:space:]]*i2c-bcm2708.*/#blacklist i2c-bcm2708/"
                sudo sed -i $BLACKLIST -e "s/^blacklist[[:space:]]*snd-soc-pcm512x.*/#blacklist snd-soc-pcm512x/"
                sudo sed -i $BLACKLIST -e "s/^blacklist[[:space:]]*snd-soc-wm8804.*/#blacklist snd-soc-wm8804/"
            fi
        else
            echo ""
            echo "No Device Tree Detected, not supported"
            echo ""
            exit 1
        fi

        if [ -e $CONFIG ] && grep -q -E "^dtparam=audio=on$" $CONFIG; then
            bcm2835off="no"
            echo ""
            echo "Disabling default sound driver"
            sudo sed -i $CONFIG -e "s/^dtparam=audio=on$/#dtparam=audio=on/"
            if [ -e $LOADMOD ] && grep -q "^snd-bcm2835" $LOADMOD; then
                sudo sed -i $LOADMOD -e "s/^snd-bcm2835/#snd-bcm2835/"
            fi
            ASK_TO_REBOOT=true
        elif [ -e $LOADMOD ] && grep -q "^snd-bcm2835" $LOADMOD; then
            bcm2835off="no"
            echo ""
            echo "Disabling default sound module"
            sudo sed -i $LOADMOD -e "s/^snd-bcm2835/#snd-bcm2835/"
            ASK_TO_REBOOT=true
        else
            echo ""
            echo "Default sound driver currently not loaded"
            bcm2835off="yes"
        fi
    fi

    echo "Configuring sound output"
    if [ -e /etc/asound.conf ]; then
        if [ -e /etc/asound.conf.old ]; then
            sudo rm -f /etc/asound.conf.old
        fi
        sudo mv /etc/asound.conf /etc/asound.conf.old
    fi
    sudo echo -e "pcm.\041default {\ntype hw\ncard 0\n}" > ~/asound.conf
    sudo echo -e "ctl.\041default {\ntype hw\ncard 0\n}" >> ~/asound.conf
    sudo mv ~/asound.conf /etc/asound.conf

    if [ $bcm2835off == "yes" ]; then
        echo ""
        echo "We can now test your $productname"
        echo "Set speakers at a low volume first however!"
        if confirm "Do you wish to test your system now?"; then
            echo "Testing..."
            speaker-test -c2 -t wav
        fi
    fi
    echo ""
    success "All done!"
    echo ""
    echo "Enjoy your new $productname!"
    echo ""

    if [ $promptreboot == "yes" ] || $ASK_TO_REBOOT; then
        sysreboot
    fi
else
    echo ""
    echo "Aborting..."
    echo ""
fi

exit 0
