#!/bin/bash

FORCE=$1

if [ $EUID -ne 0 ]; then
    USER_HOME=$(getent passwd $USER | cut -d: -f6)
else
    USER_HOME=$(getent passwd $SUDO_USER | cut -d: -f6)
fi

WORKING_DIR=$USER_HOME/Pimoroni

confirm () {
    if [ "$FORCE" == '-y' ]; then
        true
    else
        read -r -p "$1 [y/N] " response < /dev/tty
        response=${response,,}
        if [[ $response =~ ^(yes|y)$ ]]; then
                true
        else
                false
        fi
    fi
}

pip_chk_pip3 () {
    if [ -e /usr/bin/pip3  ]; then
        PIP3_BIN="pip3"
    else
        PIP3_BIN="pip-3.2"
    fi
}

pip_pkg_req3 () {
    pip_chk_pip3
    PIP_CHK=$($PIP3_BIN search $1 | grep INSTALLED)

    if [ "" == "$PIP_CHK" ]; then
        true
    else
        false
    fi
}

pip_pkg_req () {
    PIP_CHK=$(pip search $1 | grep INSTALLED)

    if [ "" == "$PIP_CHK" ]; then
        true
    else
        false
    fi
}

apt_pkg_req () {
    APT_CHK=$(dpkg-query -W --showformat='${Status}\n' $1|grep "install ok installed")

    if [ "" == "$APT_CHK" ]; then
        true
    else
        false
    fi
}

apt_pkg_install () {
    \curl -sS get.pimoroni.com/package | bash -s - $1 || { warning "Sorry, Apt failed to install $1, I can't continue!" && exit; }
}

success () {
    echo "$(tput setaf 2)$1$(tput sgr0)"
}

warning () {
    echo "$(tput setaf 1)$1$(tput sgr0)"
}

IS_RASPBIAN=`cat /etc/*-release | grep Raspbian`

if [[ "" == $IS_RASPBIAN ]]; then
    warning "Warning!"
    echo "Please only run this script on Raspbian on your Raspberry Pi"
    exit 1;
fi

echo ""
echo "This script will install PiGlow and dependencies"
echo ""
warning "--- Warning ---"
echo ""
echo "Always be careful when running scripts and commands"
echo "copied from the internet. Ensure they are from a"
echo "trusted source."
echo ""
echo "If you want to see what this script does before"
echo "running it, you should run:"
echo "    \curl -sS get.pimoroni.com/piglow"
echo ""
echo ""

if confirm "Do you wish to continue?"; then

    echo ""
    echo "Checking install requirements..."
    echo ""

    echo ""
    if confirm "PiGlow requires I2C, enable now?"; then
        \curl -sS get.pimoroni.com/i2c | bash -s - "-y"
    fi
    
    updatedb=false
    pkgdeplist=( "git" "python-pip" "python-dev" "python-smbus" )

    for pkgdep in ${pkgdeplist[@]}
        do if apt_pkg_req "$pkgdep" ; then
            updatedb=true
        fi
        done 

    if $updatedb ; then
    echo "Updating package indexes..."
    sudo apt-get update

    echo ""
    echo "Installing hardware requirements..."

    for pkgdep in ${pkgdeplist[@]}
        do if apt_pkg_req "$pkgdep" ; then
            apt_pkg_install "$pkgdep"
        fi
        done 
    else
        success "Found!"
    fi

    echo ""
    echo "Checking for Python 2 library..."

    if pip_pkg_req "piglow"; then

        echo ""
        echo "Installing PiGlow library for Python 2..."
        if ! sudo pip install piglow; then
            warning "Python 2 library install failed!"
            echo ""
            exit
        fi
        success "Done!"
    else
        echo ""
        success "Found!"
        echo ""
        if confirm "Python 2 module found. Reinstall/Update?"; then
            if ! sudo pip install piglow -I; then
                warning "Python 2 library install failed!"
                echo ""
                exit
            fi
            success "Done!"
        fi
    fi
    
    echo ""

        if ! [ -d $WORKING_DIR ]; then
                mkdir $WORKING_DIR
        fi

    if ! [ -d $WORKING_DIR/piglow ]; then
        echo "Downloading PiGlow examples..."
        export TMPDIR=`mktemp -d /tmp/pimoroni.XXXXXX`
        cd $TMPDIR
        git clone https://github.com/pimoroni/piglow
        cd $WORKING_DIR
        mkdir piglow
        cp -R $TMPDIR/piglow/examples/* $WORKING_DIR/piglow/
        rm -rf $TMPDIR
        echo ""
        success "Examples copied to $WORKING_DIR/piglow/"

    else
        if confirm "Examples already exist, shall I replace them?"; then
            mv $WORKING_DIR/piglow $WORKING_DIR/piglow-backup
            echo "Updating PiGlow examples..."
            export TMPDIR=`mktemp -d /tmp/pimoroni.XXXXXX`
            cd $TMPDIR
            git clone https://github.com/pimoroni/piglow
            cd $WORKING_DIR
            mkdir piglow
            cp -R $TMPDIR/piglow/examples/* $WORKING_DIR/piglow/
            rm -rf $TMPDIR
            echo ""
            warning "I backed up the examples to piglow-backup, just in case you've changed anything!"
            success "Examples copied to $WORKING_DIR/piglow/"
        fi
fi

    echo ""
    
    success "All done!"
    echo ""
    echo "Enjoy your new PiGlow!"
    echo ""
    echo "Note: PiGlow currently supports Python 2 only."
    echo ""

else
    echo ""
    echo "Aborting..."
    echo ""
fi
