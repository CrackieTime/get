#!/bin/bash

: <<'DISCLAIMER'

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

This script is licensed under the terms of the MIT license.
Unless otherwise noted, code reproduced herein
was written for this script.

- The Pimoroni Crew -

DISCLAIMER

: <<'ACKNOWLEDGEMENT'

The code for the do_expand_rootfs and get_init_sys reproduced
herein is lifted from the raspi-config utility script:
https://github.com/RPi-Distro/raspi-config
raspi-config is licensed under the terms of the MIT license,
reproduced below.

#####################################################

Copyright (c) 2012 Alex Bradbury <asb@asbradbury.org>

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

ACKNOWLEDGEMENT

scriptname="expandfs" # the name of this script
forcesudo="yes" # whether the script requires to be ran with root privileges
promptreboot="no" # whether the script should always prompt user to reboot

FORCE=$1
ASK_TO_REBOOT=false
CONFIG=/boot/config.txt
BLACKLIST=/etc/modprobe.d/raspi-blacklist.conf
LOADMOD=/etc/modules
DEVICE_TREE=true
UPDATE_DB=false

confirm() {
    if [ "$FORCE" == '-y' ]; then
        true
    else
        read -r -p "$1 [y/N] " response < /dev/tty
        response=${response,,}
        if [[ $response =~ ^(yes|y)$ ]]; then
            true
        else
            false
        fi
    fi
}

sudocheck() {
    if [ $(id -u) -ne 0 ]; then
        printf "Install must be run as root. Try 'sudo ./$scriptname'\n"
        exit 1
    fi
}

sysclean() {
    sudo apt-get clean
}

sysupdate() {
    sudo apt-get update
}

sysupdgrade() {
    sudo apt-get update && sudo apt-get upgrade
    sudo apt-get clean && sudo apt-get autoclean
}

sysreboot() {
    if confirm "Would you like to reboot now?"; then
        sync
        sudo reboot
    fi
}

success() {
    echo "$(tput setaf 2)$1$(tput sgr0)"
}

warning() {
    echo "$(tput setaf 1)$1$(tput sgr0)"
}

raspbian_check() {
    IS_RASPBIAN=$(cat /etc/*-release | grep "Raspbian")

    if [[ "" == $IS_RASPBIAN ]]; then
        false
    else
        true
    fi
}

if ! raspbian_check; then
    warning "Warning!"
    echo "Please only run this script on Raspbian on your Raspberry Pi"
    exit 1
fi

if [ $forcesudo == "yes" ]; then
    sudocheck
fi

echo ""
echo "This script will expand the filesystem on your SD card"
echo ""
warning "--- Warning ---"
echo ""
echo "Always be careful when running scripts and commands"
echo "copied from the internet. Ensure they are from a"
echo "trusted source."
echo ""
echo "If you want to see what this script does before"
echo "running it, you should run:"
echo "    \curl -sS get.pimoroni.com/$scriptname"
echo ""

if confirm "Do you wish to continue?"; then

get_init_sys() {
    if command -v systemctl > /dev/null && systemctl | grep -q '\-\.mount'; then
        SYSTEMD=1
    elif [ -f /etc/init.d/cron ] && [ ! -h /etc/init.d/cron ]; then
        SYSTEMD=0
    else
        echo "Unrecognised init system"
        return 1
    fi
}

do_expand_rootfs() {
    get_init_sys
    if [ $SYSTEMD -eq 1 ]; then
        ROOT_PART=$(mount | sed -n 's|^/dev/\(.*\) on / .*|\1|p')
    else
        if ! [ -h /dev/root ]; then
            echo -e "/dev/root does not exist or is not a symlink. Don't know how to expand"
            return 0
        fi
        ROOT_PART=$(readlink /dev/root)
    fi
    PART_NUM=${ROOT_PART#mmcblk0p}
    if [ "$PART_NUM" = "$ROOT_PART" ]; then
        echo -e "$ROOT_PART is not an SD card. Don't know how to expand"
        return 0
    fi
    # NOTE: the NOOBS partition layout confuses parted. For now, let's only 
    # agree to work with a sufficiently simple partition layout
    if [ "$PART_NUM" -ne 2 ]; then
        echo -e "Your partition layout is not currently supported by this tool. You are probably using NOOBS, in which case your root filesystem is already expanded anyway."
        return 0
    fi
    LAST_PART_NUM=$(parted /dev/mmcblk0 -ms unit s p | tail -n 1 | cut -f 1 -d:)
    if [ $LAST_PART_NUM -ne $PART_NUM ]; then
        echo -e "$ROOT_PART is not the last partition. Don't know how to expand"
        return 0
    fi
    # Get the starting offset of the root partition
    PART_START=$(parted /dev/mmcblk0 -ms unit s p | grep "^${PART_NUM}" | cut -f 2 -d: | sed 's/[^0-9]//g')
    [ "$PART_START" ] || return 1
    # Return value will likely be error for fdisk as it fails to reload the
    # partition table because the root fs is mounted
    fdisk /dev/mmcblk0 <<EOF
p
d
$PART_NUM
n
p
$PART_NUM
$PART_START

p
w
EOF
    ASK_TO_REBOOT=1
    # now set up an init.d script
    cat <<EOF > /etc/init.d/resize2fs_once &&
#!/bin/sh
### BEGIN INIT INFO
# Provides:          resize2fs_once
# Required-Start:
# Required-Stop:
# Default-Start: 3
# Default-Stop:
# Short-Description: Resize the root filesystem to fill partition
# Description:
### END INIT INFO

. /lib/lsb/init-functions

case "\$1" in
  start)
    log_daemon_msg "Starting resize2fs_once" &&
    resize2fs /dev/$ROOT_PART &&
    update-rc.d resize2fs_once remove &&
    rm /etc/init.d/resize2fs_once &&
    log_end_msg \$?
    ;;
  *)
    echo "Usage: \$0 start" >&2
    exit 3
    ;;
esac
EOF
    chmod +x /etc/init.d/resize2fs_once &&
    update-rc.d resize2fs_once defaults &&
    if [ "$INTERACTIVE" = True ]; then
        echo -e "Root partition has been resized.\nThe filesystem will be enlarged upon the next reboot"
    fi
}
    do_expand_rootfs

    echo "Messages regarding failure to read the partition table can be ignored."
    echo "You should now reboot your system."
    echo ""

    if [ $promptreboot == "yes" ] || $ASK_TO_REBOOT; then
        sysreboot
    fi
else
    echo ""
    echo "Aborting..."
    echo ""
fi

exit 0
